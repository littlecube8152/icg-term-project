#include "compute/interval.comp"
#include "compute/inertial_frame.comp"
#include "compute/constants.comp"


Ray Ray_new(vec4 origin, vec3 direction, vec3 iframe) {
    return Ray(
        origin,
        direction,
        Interval_positive,
        iframe
    );
}

Ray Ray_new(vec3 origin, vec3 direction, vec3 iframe) {
    return Ray(
        vec4(origin, 0.0f),
        direction,
        Interval_positive,
        iframe
    );
}

vec4 Ray_at(Ray ray, float alpha) {
    return ray.origin + vec4(alpha * ray.direction, alpha / kSpeedOfLight);
}

void Ray_transformFrame(inout Ray ray, vec3 to_iframe) {
    vec3 new_velocity = IFrame_transformVelocityFrom(to_iframe, ray.iframe, ray.direction * kSpeedOfLight);
    ray.origin = IFrame_transformCoordinateFrom(to_iframe, ray.iframe, ray.origin.w, ray.origin.xyz);
    ray.direction = new_velocity / kSpeedOfLight;
    ray.iframe = to_iframe;
}
