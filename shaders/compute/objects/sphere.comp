#include "compute/ray.comp"
#include "compute/hit_record.comp"
#include "compute/interval.comp"
#include "compute/vecutil.comp"
#include "compute/materials/materials.comp"


bool Sphere_hit(Sphere sphere, Ray ray, out HitRecord record) {
    vec3 origin_to_center = sphere.center - ray.origin.xyz;
    vec3 proj = proj_unit(origin_to_center, ray.direction);
    vec3 closest = origin_to_center - proj;

    if (dot(closest, closest) > sphere.radius * sphere.radius)
        return false;
    
    float alpha = dot(proj, ray.direction);
    float d_alpha = sqrt(sphere.radius * sphere.radius - dot(closest, closest));

    float hit;
    if (Interval_surrounds(ray.interval, alpha - d_alpha))
        hit = alpha - d_alpha;
    else if (Interval_surrounds(ray.interval, alpha + d_alpha))
        hit = alpha + d_alpha;
    else
        return false;
    
    vec4 coord = Ray_at(ray, hit);
    record.alpha = hit;
    record.coord = coord.xyz;
    HitRecord_setFaceNormal(record, ray, (coord.xyz - sphere.center) / sphere.radius);
    if (sphere.material_id >= 0) {
        record.has_scattered = Material_scatter(sphere.material_id, ray, record);
    } else {
        record.has_scattered = false;
    }

    return true;
}
