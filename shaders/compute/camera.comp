#include "compute/constants.comp"
#include "compute/uniforms.comp"
#include "compute/vecutil.comp"
#include "compute/interval.comp"
#include "compute/ray.comp"
#include "compute/hit_record.comp"
#include "compute/objects/sphere.comp"
#include "compute/objects/triangle.comp"
#include "compute/color.comp"
#include "compute/macros.h"


Ray Camera_getRayToPixel(vec2 pixel_coord, float time) {
    vec3 pixel_position = (camera.viewport_lower_left + camera.viewport_dx * pixel_coord.x + camera.viewport_dy * pixel_coord.y).xyz;
    return Ray_new(vec4(camera.lookfrom.xyz, time), 
                   normalize(pixel_position - camera.lookfrom.xyz), 
                   camera.iframe.xyz);
}

Ray Camera_getRayToPixel(vec2 pixel_coord) {
    return Camera_getRayToPixel(pixel_coord, 0.0f);
}

bool Camera_hitAllObjects(Ray ray, out HitRecord record) {
    HitRecord hit_result;
    bool hit_any = false;
    for (int i = 1; i <= n_spheres; i++) {
        if (Sphere_hit(u_spheres[i], ray, hit_result)) {
            hit_any = true;
            ray.interval.max = hit_result.alpha;
            record = hit_result;
        }
    }
    for (int i = 1; i <= n_triangles; i++) {
        if (Triangle_hit(u_triangles[i], ray, hit_result)) {
            hit_any = true;
            ray.interval.max = hit_result.alpha;
            record = hit_result;
        }
    }
    if (hit_any) {
        record.has_scattered = Material_scatter(record.material_id, record);
    }
    return hit_any;
}

uint Camera_compressColor(vec4 color)
{
    color *= 255.0f;
    return (uint(color[3]) << 24) | (uint(color[2]) << 16) | (uint(color[1]) << 8) | uint(color[0]);
}

vec4 Camera_decompressColor(uint color)
{
    return vec4(color & 255, (color >> 8) & 255, (color >> 16) & 255, (color >> 24) & 255) / 255.0f;
}

vec4 Camera_getRayColor(vec3 camera_iframe, Ray ray) {
    vec4 accum_attenuation = vec4(1, 1, 1, 1);
    vec4 object_space_color = vec4(0, 0, 0, 1);
    
    HitRecord record;
    float scales[MAX_RECURSION_DEPTH];
    uint attenuations[MAX_RECURSION_DEPTH];
    
    int depth = 0;
    for (; depth < MAX_RECURSION_DEPTH; depth++) {
        if (!Camera_hitAllObjects(ray, record)) {
            // sky box
            float dotval = dot(IFrame_transformVelocityFrom(camera_iframe.xyz, ray.iframe, ray.direction), vec3(0, 1, 0));
            float ratio = (dotval + 1) / 2.0f;
            vec4 sky_color = (1.0f - ratio) * vec4(1, 1, 1, 1) + ratio * vec4(0.2, 0.2, 1.0, 1.0);
            object_space_color = accum_attenuation * sky_color;
            break;
        }
        if (!record.has_scattered) {
            // light absorbed by the object
            object_space_color = vec4(0, 0, 0, 1);
            break;
        }
        accum_attenuation *= record.attenuation;
        attenuations[depth] = Camera_compressColor(accum_attenuation);

        // doppler effect of light
        vec3 velocity = IFrame_transformVelocityFrom(ray.iframe, record.ray.iframe, vec3(0, 0, 0));
        vec3 line_of_sight = ray.origin.xyz - IFrame_transformCoordinateFrom(ray.iframe, record.ray.iframe, record.ray.origin.w, record.ray.origin.xyz).xyz;
        float cosine = dot(default_normalize(velocity, vec3(0.0f)), normalize(line_of_sight));
        float beta = IFrame_getBetaScalar(ray.iframe, record.ray.iframe);
        float gamma = IFrame_getGamma(ray.iframe, record.ray.iframe);
        scales[depth] = 1.0f / gamma / (1.0f + beta * cosine);

        ray = record.scattered_ray;
    }
    depth--;
    for (; depth >= 0; depth--)
    {
        object_space_color *= Camera_decompressColor(attenuations[depth]);
        object_space_color = vec4(Color_lightWavelengthShift(object_space_color.rgb, scales[depth]), object_space_color.a);
    }

    return object_space_color;
}

vec4 Camera_getPixelColor(vec3 camera_iframe, ivec2 pixel_coord, float time) {
    vec4 pixel_color = vec4(0, 0, 0, 0);
    for (int dx = 0; dx < camera.sqrt_samples_per_pixel; dx++) {
        for (int dy = 0; dy < camera.sqrt_samples_per_pixel; dy++) {
            Ray sampled_ray = Camera_getRayToPixel(
                vec2(pixel_coord) + camera.pixel_samples_delta * vec2(dx, dy),
                time
            );
            pixel_color += Camera_getRayColor(camera_iframe, sampled_ray);
        }
    }
    pixel_color *= camera.pixel_samples_scale;
    pixel_color = Color_gammaCorrection(pixel_color);
    return pixel_color;
}

vec4 Camera_getPixelColor(vec3 camera_iframe, ivec2 pixel_coord) {
    return Camera_getPixelColor(camera_iframe, pixel_coord, 0.0f);
}