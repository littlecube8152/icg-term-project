#include "compute/defs.comp"
#include "compute/materials/material_types.h"
#include "compute/constants.comp"
#include "compute/ray.comp"
#include "compute/interval.comp"
#include "compute/random.comp"


Material Dielectric_new(float eta) {
    Material material;
    material.material_type = MATERIAL_TYPE_DIELECTRIC;
    material.dielectric = Dielectric(eta);
    return material;
}

float Dielectric_reflectance(float cosine, float eta) {
    float r0 = (1 - eta) / (1 + eta);
    r0 = r0 * r0;
    return r0 + (1 - r0) * pow((1 - cosine), 5);
}

bool Dielectric_scatter(Dielectric dielectric, inout HitRecord record) {
    record.attenuation = vec4(1, 1, 1, 1);
    float real_eta = record.front_face ? (1.0f / dielectric.eta) : dielectric.eta;
    vec3 refracted = refract(record.ray.direction, record.normal, real_eta);
    vec3 reflected = reflect(record.ray.direction, record.normal);
    if (abs(length(refracted)) < kEpsilon) {
        record.scattered_ray = Ray_new(record.ray.origin, reflected, record.ray.iframe);
    } else {
        float cosine = dot(-record.ray.direction, record.normal);
        float r = Dielectric_reflectance(min(cosine, 1.0f), real_eta);
        float rand_sample = Random_float_unitPositive();
        if (rand_sample < r) {
            record.scattered_ray = Ray_new(record.ray.origin, reflected, record.ray.iframe);
        } else {
            record.scattered_ray = Ray_new(record.ray.origin, refracted, record.ray.iframe);
        }
    }
    return true;
}
