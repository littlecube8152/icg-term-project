#include "compute/defs.comp"
#include "compute/materials/material_types.h"
#include "compute/ray.comp"
#include "compute/interval.comp"
#include "compute/random.comp"


Material Metal_new(vec4 albedo, float fuzz) {
    Material material;
    material.material_type = MATERIAL_TYPE_METAL;
    material.metal = Metal(albedo, fuzz);
    return material;
}

bool Metal_scatter(Metal metal, inout HitRecord record) {
    vec3 reflected = reflect(record.ray.direction, record.normal);
    reflected = normalize(reflected + metal.fuzz * Random_vec3_unitLength());
    record.scattered_ray = Ray_new(record.ray.origin, reflected, record.ray.iframe);
    record.attenuation = metal.albedo;
    return dot(reflected, record.normal) > 0.0f;
}
